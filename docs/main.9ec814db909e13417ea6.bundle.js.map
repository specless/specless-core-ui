{"version":3,"file":"main.9ec814db909e13417ea6.bundle.js","sources":["webpack:///./src/components/layout/layout-api.ts"],"sourcesContent":["import { css } from '@emotion/core';\nimport _ from 'lodash/fp';\nimport React, { useState } from 'react';\nimport { IBreakpoint, IBreakpointsContainer } from '../../models/breakpoint';\nimport { ILayoutProps } from './layout';\n\nexport type ILayoutBreakpointCallBack = (\n  breakpoints: IBreakpointsContainer\n) => void;\n\nexport type ISiderState = 'normal' | 'collapsed' | 'expanded' | 'expanded-wide';\n\nexport interface ILayoutApiState {\n  isLoading: boolean;\n  siderState: ISiderState;\n  siderHiddenMobile: boolean;\n  currentSize: string;\n  onBreakpointChangeHandlers: ILayoutBreakpointCallBack[];\n  breakpoints: IBreakpoint[];\n}\n\nexport interface ILayoutApi {\n  toggleMobileSider: () => void;\n  hideMobileSider: () => void;\n  showMobileSider: () => void;\n  toggleLoading: () => void;\n  setLoading: () => void;\n  unsetLoading: () => void;\n  setBreakpoints: (breakpoints: IBreakpoint[]) => void;\n  setCurrentSize: (currentSize: string) => void;\n  setSiderState: (state: ISiderState) => void;\n  addBreakpointListener: (callback: ILayoutBreakpointCallBack) => void;\n  removeBreakpointListener: (callback: ILayoutBreakpointCallBack) => void;\n  getState: () => ILayoutApiState;\n}\n\nconst DEFAULT_LAYOUT_API_STATE = {\n  isLoading: false,\n  siderState: 'normal' as ISiderState,\n  siderHiddenMobile: false,\n  currentSize: '',\n  onBreakpointChangeHandlers: [],\n  breakpoints: [],\n};\n\nexport const LAYOUT_INNER_CONTENT_CSS = css`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  max-width: 100%;\n  max-height: 100%;\n  overflow-x: hidden;\n  overflow-y: auto;\n`;\n\nexport const useLayoutApi = (props: ILayoutProps): ILayoutApi => {\n  const _getInitialBreakpointHandlersArray = (\n    handlers?: ILayoutBreakpointCallBack | ILayoutBreakpointCallBack[]\n  ): ILayoutBreakpointCallBack[] => {\n    if (_.isNil) {\n      return [] as ILayoutBreakpointCallBack[];\n    }\n    if (_.isArray) {\n      return handlers as ILayoutBreakpointCallBack[];\n    }\n    return [handlers] as ILayoutBreakpointCallBack[];\n  };\n\n  const [_currentSize, _setCurrentSize] = useState<string>('');\n  const [_isLoading, _setIsLoading] = useState<boolean>(\n    props.isLoading as boolean\n  );\n  const [_siderState, _setSiderState] = useState<ISiderState>(\n    props.siderState as ISiderState\n  );\n  const [_siderHiddenMobile, _setSiderHiddenMobile] = useState<boolean>(\n    props.siderHiddenMobile as boolean\n  );\n  const [\n    _onBreakpointChangeHandlers,\n    _setOnBreakpointChangeHandlers,\n  ] = useState<ILayoutBreakpointCallBack[]>(\n    _getInitialBreakpointHandlersArray(props.onBreakpointChange)\n  );\n  const [_breakpoints, _setBreakpoints] = useState<IBreakpoint[]>([\n    { max: 480 },\n    { max: 1100 },\n    { min: 1100 },\n  ]);\n\n  const toggleMobileSider = () => {\n    _setSiderHiddenMobile(!_siderHiddenMobile);\n  };\n\n  const showMobileSider = () => {\n    _setSiderHiddenMobile(false);\n  };\n\n  const hideMobileSider = () => {\n    _setSiderHiddenMobile(true);\n  };\n\n  const toggleLoading = () => {\n    _setIsLoading(!_isLoading);\n  };\n\n  const setLoading = () => {\n    _setIsLoading(true);\n  };\n\n  const unsetLoading = () => {\n    _setIsLoading(false);\n  };\n\n  const setBreakpoints = (breakpoints: IBreakpoint[]) => {\n    _setBreakpoints(breakpoints);\n  };\n\n  const setCurrentSize = (currentSize: string) => {\n    _setCurrentSize(currentSize);\n  };\n\n  const setSiderState = (state: ISiderState) => {\n    _setSiderState(state);\n  };\n\n  const addBreakpointListener = (callback: ILayoutBreakpointCallBack) => {\n    const _listeners = _.concat(_onBreakpointChangeHandlers, [callback]);\n    _setOnBreakpointChangeHandlers(_listeners);\n  };\n\n  const removeBreakpointListener = (callback: ILayoutBreakpointCallBack) => {\n    const _listeners = _.without([callback], _onBreakpointChangeHandlers);\n    _setOnBreakpointChangeHandlers(_listeners);\n  };\n\n  return {\n    toggleMobileSider,\n    hideMobileSider,\n    showMobileSider,\n    toggleLoading,\n    setLoading,\n    unsetLoading,\n    addBreakpointListener,\n    removeBreakpointListener,\n    setBreakpoints,\n    setCurrentSize,\n    setSiderState,\n    getState() {\n      return {\n        isLoading: _isLoading,\n        siderState: _siderState,\n        siderHiddenMobile: _siderHiddenMobile,\n        currentSize: _currentSize,\n        onBreakpointChangeHandlers: _onBreakpointChangeHandlers,\n        breakpoints: _breakpoints,\n      };\n    },\n  };\n};\n\nexport const LayoutContext = React.createContext<ILayoutApi>({\n  toggleMobileSider: _.noop,\n  hideMobileSider: _.noop,\n  showMobileSider: _.noop,\n  toggleLoading: _.noop,\n  setLoading: _.noop,\n  unsetLoading: _.noop,\n  setBreakpoints: _.noop,\n  setCurrentSize: _.noop,\n  setSiderState: _.noop,\n  addBreakpointListener: _.noop,\n  removeBreakpointListener: _.noop,\n  getState() {\n    return DEFAULT_LAYOUT_API_STATE;\n  },\n});\n"],"mappings":"AAAA","sourceRoot":""}