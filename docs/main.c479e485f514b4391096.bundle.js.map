{"version":3,"file":"main.c479e485f514b4391096.bundle.js","sources":["webpack:///./src/components/layout/layout-api.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@emotion/core\");\nvar fp_1 = tslib_1.__importDefault(require(\"lodash/fp\"));\nvar react_1 = tslib_1.__importStar(require(\"react\"));\nvar DEFAULT_LAYOUT_API_STATE = {\n    isLoading: false,\n    siderState: 'normal',\n    siderHiddenMobile: false,\n    currentSize: '',\n    onBreakpointChangeHandlers: [],\n    breakpoints: [],\n};\nexports.LAYOUT_INNER_CONTENT_CSS = core_1.css(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n  position: relative;\\n  width: 100%;\\n  height: 100%;\\n  max-width: 100%;\\n  max-height: 100%;\\n  overflow-x: hidden;\\n  overflow-y: auto;\\n\"], [\"\\n  position: relative;\\n  width: 100%;\\n  height: 100%;\\n  max-width: 100%;\\n  max-height: 100%;\\n  overflow-x: hidden;\\n  overflow-y: auto;\\n\"])));\nexports.useLayoutApi = function (props) {\n    var _getInitialBreakpointHandlersArray = function (handlers) {\n        if (fp_1.default.isNil) {\n            return [];\n        }\n        if (fp_1.default.isArray) {\n            return handlers;\n        }\n        return [handlers];\n    };\n    var _a = react_1.useState(''), _currentSize = _a[0], _setCurrentSize = _a[1];\n    var _b = react_1.useState(props.isLoading), _isLoading = _b[0], _setIsLoading = _b[1];\n    var _c = react_1.useState(props.siderState), _siderState = _c[0], _setSiderState = _c[1];\n    var _d = react_1.useState(props.siderHiddenMobile), _siderHiddenMobile = _d[0], _setSiderHiddenMobile = _d[1];\n    var _e = react_1.useState(_getInitialBreakpointHandlersArray(props.onBreakpointChange)), _onBreakpointChangeHandlers = _e[0], _setOnBreakpointChangeHandlers = _e[1];\n    var _f = react_1.useState([\n        { max: 480 },\n        { max: 1100 },\n        { min: 1100 },\n    ]), _breakpoints = _f[0], _setBreakpoints = _f[1];\n    var toggleMobileSider = function () {\n        _setSiderHiddenMobile(!_siderHiddenMobile);\n    };\n    var showMobileSider = function () {\n        _setSiderHiddenMobile(false);\n    };\n    var hideMobileSider = function () {\n        _setSiderHiddenMobile(true);\n    };\n    var toggleLoading = function () {\n        _setIsLoading(!_isLoading);\n    };\n    var setLoading = function () {\n        _setIsLoading(true);\n    };\n    var unsetLoading = function () {\n        _setIsLoading(false);\n    };\n    var setBreakpoints = function (breakpoints) {\n        _setBreakpoints(breakpoints);\n    };\n    var setCurrentSize = function (currentSize) {\n        _setCurrentSize(currentSize);\n    };\n    var setSiderState = function (state) {\n        _setSiderState(state);\n    };\n    var addBreakpointListener = function (callback) {\n        var _listeners = fp_1.default.concat(_onBreakpointChangeHandlers, [callback]);\n        _setOnBreakpointChangeHandlers(_listeners);\n    };\n    var removeBreakpointListener = function (callback) {\n        var _listeners = fp_1.default.without([callback], _onBreakpointChangeHandlers);\n        _setOnBreakpointChangeHandlers(_listeners);\n    };\n    return {\n        toggleMobileSider: toggleMobileSider,\n        hideMobileSider: hideMobileSider,\n        showMobileSider: showMobileSider,\n        toggleLoading: toggleLoading,\n        setLoading: setLoading,\n        unsetLoading: unsetLoading,\n        addBreakpointListener: addBreakpointListener,\n        removeBreakpointListener: removeBreakpointListener,\n        setBreakpoints: setBreakpoints,\n        setCurrentSize: setCurrentSize,\n        setSiderState: setSiderState,\n        getState: function () {\n            return {\n                isLoading: _isLoading,\n                siderState: _siderState,\n                siderHiddenMobile: _siderHiddenMobile,\n                currentSize: _currentSize,\n                onBreakpointChangeHandlers: _onBreakpointChangeHandlers,\n                breakpoints: _breakpoints,\n            };\n        },\n    };\n};\nexports.LayoutContext = react_1.default.createContext({\n    toggleMobileSider: fp_1.default.noop,\n    hideMobileSider: fp_1.default.noop,\n    showMobileSider: fp_1.default.noop,\n    toggleLoading: fp_1.default.noop,\n    setLoading: fp_1.default.noop,\n    unsetLoading: fp_1.default.noop,\n    setBreakpoints: fp_1.default.noop,\n    setCurrentSize: fp_1.default.noop,\n    setSiderState: fp_1.default.noop,\n    addBreakpointListener: fp_1.default.noop,\n    removeBreakpointListener: fp_1.default.noop,\n    getState: function () {\n        return DEFAULT_LAYOUT_API_STATE;\n    },\n});\nvar templateObject_1;\n"],"mappings":"AACA","sourceRoot":""}